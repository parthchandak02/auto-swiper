name: Build Auto-Swiper Executables

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact_name: AutoSwiper.exe
            asset_name: AutoSwiper-Windows.exe
          - os: macos-latest
            artifact_name: AutoSwiper
            asset_name: AutoSwiper-macOS
          - os: ubuntu-latest
            artifact_name: AutoSwiper
            asset_name: AutoSwiper-Linux

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build executable
        shell: bash
        run: |
          python scripts/build_03_cross_platform.py

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: dist/${{ matrix.artifact_name }}

      - name: Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: dist/${{ matrix.artifact_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Build Auto-Swiper Executables

on:
  push:
    branches: [ main ]  # Auto-trigger on every main push - no manual tagging needed!
    # Removed path restrictions - ANY push to main should create a release!
  workflow_dispatch:
  pull_request:
    branches: [ main ]
    paths:
      - 'main.py'
      - 'requirements.txt'
      - 'scripts/**'
      - '.github/workflows/build.yml'

# Security: Restrict permissions to minimum required
permissions:
  contents: write
  packages: read
  actions: read
  security-events: write

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Auto-increment version for main branch pushes
  auto-version:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      version_tag: ${{ steps.version.outputs.version_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for version detection
          
      - name: Auto-increment version
        id: version
        run: |
          # Get the latest tag (if any)
          LATEST_TAG=$(git tag -l "v*" --sort=-version:refname | head -n 1)
          
          if [ -z "$LATEST_TAG" ]; then
            # No tags exist, start with v1.0.0
            NEW_VERSION="v1.0.0"
          else
            # Extract version numbers and increment patch version
            VERSION_NUM=$(echo $LATEST_TAG | sed 's/v//')
            MAJOR=$(echo $VERSION_NUM | cut -d. -f1)
            MINOR=$(echo $VERSION_NUM | cut -d. -f2)
            PATCH=$(echo $VERSION_NUM | cut -d. -f3)
            
            # Increment patch version
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"
          fi
          
          echo "Previous version: $LATEST_TAG"
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_tag=$NEW_VERSION" >> $GITHUB_OUTPUT

  # Security validation job
  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2 # v2.6.1
        with:
          egress-policy: audit
          
      - name: Checkout code
        uses: actions/checkout@v4 # v4.1.7
        with:
          persist-credentials: false
          
      - name: Set up Python
        uses: actions/setup-python@v4 # v4.8.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install uv for security scan
        uses: astral-sh/setup-uv@v5
          
      - name: Install security tools with uv
        run: |
          uv pip install --system bandit safety pip-audit
          
      - name: Run security scans
        run: |
          echo "🔍 Running security scans..."
          bandit -r . -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true
          pip-audit --format=json --output=pip-audit-report.json || true
          
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: '*-report.json'
          retention-days: 30

  build:
    runs-on: ${{ matrix.os }}
    needs: [auto-version, security-scan]
    if: always() && (needs.security-scan.result == 'success' || github.event_name != 'pull_request')
    
    env:
      PYTHONIOENCODING: utf-8
      PYTHONUTF8: 1
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            artifact_name: AutoSwiper.exe
            asset_name: AutoSwiper-Windows.exe
            platform: windows
          - os: macos-latest
            artifact_name: AutoSwiper.app
            asset_name: AutoSwiper-macOS
            platform: macos
          - os: ubuntu-latest
            artifact_name: AutoSwiper
            asset_name: AutoSwiper-Linux
            platform: linux

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2 # v2.6.1
        with:
          egress-policy: audit
          
      - name: Checkout code
        uses: actions/checkout@v4 # v4.1.7
        with:
          persist-credentials: false
          fetch-depth: 0  # For proper version detection
          
      - name: Set up Python
        uses: actions/setup-python@v5 # Updated to v5 for better cache handling
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          # No pip cache needed - uv handles dependencies blazingly fast!
          
      - name: Verify Python version and environment
        run: |
          python --version
          python -c "import sys; print(f'Python executable: {sys.executable}')"
          echo "Platform: ${{ matrix.platform }}"
          
      - name: Install uv
        uses: astral-sh/setup-uv@v5
          
      - name: Install dependencies with uv (blazingly fast!)
        run: |
          uv pip install --system -r requirements.txt
          uv pip install --system pyinstaller
          
      - name: Verify dependencies
        run: |
          uv pip list --system
          uv pip check --system
          
      - name: Set build environment variables
        run: |
          echo "BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
          echo "BUILD_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "COMMIT_SHA=${GITHUB_SHA::8}" >> $GITHUB_ENV
        shell: bash
        
      - name: Build executable
        run: python scripts/build_03_cross_platform.py
        env:
          PYTHONHASHSEED: 1  # For reproducible builds
          
      - name: Verify build output
        run: |
          echo "🔍 Checking dist/ directory contents:"
          ls -la dist/ || echo "No dist/ directory found"
          echo ""
          
          # Check for the expected artifact
          if [ -f "dist/${{ matrix.artifact_name }}" ] || [ -d "dist/${{ matrix.artifact_name }}" ]; then
            echo "✅ Build successful: dist/${{ matrix.artifact_name }}"
            ls -la dist/
            
            # Show file info if it's a file
            if [ -f "dist/${{ matrix.artifact_name }}" ]; then
              file dist/${{ matrix.artifact_name }} || true
            fi
            
            # Show app bundle info if it's a directory (macOS .app)
            if [ -d "dist/${{ matrix.artifact_name }}" ]; then
              echo "📦 App bundle structure:"
              ls -la dist/${{ matrix.artifact_name }}/ || true
            fi
          else
            echo "❌ Build failed: dist/${{ matrix.artifact_name }} not found"
            echo "🔍 Available files in dist/:"
            find dist/ -type f -name "*" 2>/dev/null || echo "No files found"
            echo "🔍 Available directories in dist/:"
            find dist/ -type d -name "*" 2>/dev/null || echo "No directories found"
            exit 1
          fi
        shell: bash
        
      - name: Generate build metadata
        run: |
          cat > dist/build-info.json << EOF
          {
            "version": "${{ env.BUILD_VERSION }}",
            "commit": "${{ env.COMMIT_SHA }}",
            "build_date": "${{ env.BUILD_DATE }}",
            "platform": "${{ matrix.platform }}",
            "python_version": "${{ env.PYTHON_VERSION }}",
            "runner_os": "${{ runner.os }}"
          }
          EOF
        shell: bash
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}-${{ env.COMMIT_SHA }}
          path: |
            dist/${{ matrix.artifact_name }}
            dist/build-info.json
          retention-days: 90
          compression-level: 6
          
      - name: Upload artifacts for release
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.asset_name }}
          path: dist/${{ matrix.artifact_name }}
          retention-days: 30

  # Automatic release with auto-incremented version (only for main pushes)
  auto-release:
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [auto-version, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Check Prerequisites  
        run: |
          echo "🔍 Checking job dependencies..."
          echo "Auto-version result: ${{ needs.auto-version.result }}"
          echo "Build result: ${{ needs.build.result }}"
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          
          if [[ "${{ needs.auto-version.result }}" != "success" ]]; then
            echo "❌ Auto-version job failed - cannot create release"
            exit 1
          fi
          
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "❌ Build job failed - cannot create release"  
            exit 1
          fi
          
          echo "✅ All prerequisites met - proceeding with release"
          
      - name: Harden Runner
        uses: step-security/harden-runner@v2 # v2.6.1
        with:
          egress-policy: audit
          
      - name: Checkout code
        uses: actions/checkout@v4 # v4.1.7
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: latest-release/
          merge-multiple: true
          
      - name: Prepare latest release assets
        run: |
          # List downloaded artifacts for debugging
          echo "=== Downloaded artifacts structure ==="
          find latest-release/ -type f -name "*" -ls
          echo ""
          
          # Find and copy artifacts more robustly
          echo "=== Searching for release artifacts ==="
          
          # Copy Windows executable
          WINDOWS_FILE=$(find latest-release/ -name "*Windows*" -o -name "*windows*" -o -name "*.exe" | head -1)
          if [ -n "$WINDOWS_FILE" ] && [ -f "$WINDOWS_FILE" ]; then
            cp "$WINDOWS_FILE" ./AutoSwiper.exe
            echo "✅ Windows: $WINDOWS_FILE → AutoSwiper.exe"
          else
            echo "❌ Windows artifact not found"
          fi
          
          # Copy macOS executable or .app bundle
          MACOS_FILE=$(find latest-release/ -name "*macOS*" -o -name "*macos*" -o -name "*Darwin*" -o -name "*.app" | grep -v ".exe" | head -1)
          if [ -n "$MACOS_FILE" ]; then
            if [ -d "$MACOS_FILE" ] && [[ "$MACOS_FILE" == *.app ]]; then
              # If it's an .app bundle (directory), zip it for distribution
              zip -r ./AutoSwiper-macOS.zip "$MACOS_FILE"
              echo "✅ macOS: $MACOS_FILE (app bundle) → AutoSwiper-macOS.zip"
            elif [ -f "$MACOS_FILE" ]; then
              # If it's a regular file, copy it directly
              cp "$MACOS_FILE" ./AutoSwiper-macOS
              echo "✅ macOS: $MACOS_FILE (executable) → AutoSwiper-macOS"
            else
              echo "❌ macOS artifact found but invalid: $MACOS_FILE"
            fi
          else
            echo "❌ macOS artifact not found"
          fi
          
          # Copy Linux executable
          LINUX_FILE=$(find latest-release/ -name "*Linux*" -o -name "*linux*" | grep -v ".exe" | head -1)
          if [ -n "$LINUX_FILE" ] && [ -f "$LINUX_FILE" ]; then
            cp "$LINUX_FILE" ./AutoSwiper-Linux  
            echo "✅ Linux: $LINUX_FILE → AutoSwiper-Linux"
          else
            echo "❌ Linux artifact not found"
          fi
          
          # List final files for debugging
          echo ""
          echo "=== Final release assets ==="
          ls -la AutoSwiper* 2>/dev/null || echo "❌ No AutoSwiper files found"
          
      - name: Verify Release Assets
        run: |
          echo "=== Verifying release assets before creating release ==="
          ASSET_COUNT=0
          
          if [ -f "AutoSwiper.exe" ]; then
            echo "✅ Windows executable ready ($(du -h AutoSwiper.exe | cut -f1))"
            ASSET_COUNT=$((ASSET_COUNT + 1))
          fi
          
          if [ -f "AutoSwiper-macOS" ]; then
            echo "✅ macOS executable ready ($(du -h AutoSwiper-macOS | cut -f1))"
            ASSET_COUNT=$((ASSET_COUNT + 1))
          fi
          
          if [ -f "AutoSwiper-Linux" ]; then
            echo "✅ Linux executable ready ($(du -h AutoSwiper-Linux | cut -f1))"
            ASSET_COUNT=$((ASSET_COUNT + 1))
          fi
          
          echo "📊 Total assets ready: $ASSET_COUNT/3"
          
          if [ $ASSET_COUNT -eq 0 ]; then
            echo "❌ ERROR: No release assets found! Cannot create release."
            exit 1
          fi
          
      - name: Create Git Tag
        run: |
          # Create and push the auto-incremented tag
          git tag ${{ needs.auto-version.outputs.version_tag }}
          git push origin ${{ needs.auto-version.outputs.version_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create Official Release
        uses: softprops/action-gh-release@v1 # v1.0.0
        with:
          tag_name: ${{ needs.auto-version.outputs.version_tag }}
          name: "🚀 Auto-Swiper ${{ needs.auto-version.outputs.version_tag }} - Ready to Download!"
          body: |
            **Ready-to-use executables for Windows, macOS, and Linux - no Python installation required!**
            
            ## ⚡ **What's New:**
            ```
            ${{ github.event.head_commit.message }}
            ```
            
            ## 🚀 **Quick Start:**
            - **Windows**: Double-click `AutoSwiper.exe`  
            - **macOS**: Extract `AutoSwiper-macOS.zip`, then double-click `AutoSwiper.app` (or run executable directly)
            - **Linux**: `chmod +x AutoSwiper-Linux && ./AutoSwiper-Linux`
          files: |
            AutoSwiper*
            *.zip
          draft: false
          prerelease: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
