name: Build Auto-Swiper Executables

on:
  push:
    branches: [ main ]  # Auto-trigger on every main push - no manual tagging needed!
    paths:
      - 'main.py'
      - 'requirements.txt'
      - 'scripts/**'
      - '.github/workflows/build.yml'
  workflow_dispatch:
  pull_request:
    branches: [ main ]
    paths:
      - 'main.py'
      - 'requirements.txt'
      - 'scripts/**'
      - '.github/workflows/build.yml'

# Security: Restrict permissions to minimum required
permissions:
  contents: write
  packages: read
  actions: read
  security-events: write

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Auto-increment version for main branch pushes
  auto-version:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      version_tag: ${{ steps.version.outputs.version_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for version detection
          
      - name: Auto-increment version
        id: version
        run: |
          # Get the latest tag (if any)
          LATEST_TAG=$(git tag -l "v*" --sort=-version:refname | head -n 1)
          
          if [ -z "$LATEST_TAG" ]; then
            # No tags exist, start with v1.0.0
            NEW_VERSION="v1.0.0"
          else
            # Extract version numbers and increment patch version
            VERSION_NUM=$(echo $LATEST_TAG | sed 's/v//')
            MAJOR=$(echo $VERSION_NUM | cut -d. -f1)
            MINOR=$(echo $VERSION_NUM | cut -d. -f2)
            PATCH=$(echo $VERSION_NUM | cut -d. -f3)
            
            # Increment patch version
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"
          fi
          
          echo "Previous version: $LATEST_TAG"
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_tag=$NEW_VERSION" >> $GITHUB_OUTPUT

  # Security validation job
  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2 # v2.6.1
        with:
          egress-policy: audit
          
      - name: Checkout code
        uses: actions/checkout@v4 # v4.1.7
        with:
          persist-credentials: false
          
      - name: Set up Python
        uses: actions/setup-python@v4 # v4.8.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install uv for security scan
        uses: astral-sh/setup-uv@v5
          
      - name: Install security tools with uv
        run: |
          uv pip install --system bandit safety pip-audit
          
      - name: Run security scans
        run: |
          echo "🔍 Running security scans..."
          bandit -r . -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true
          pip-audit --format=json --output=pip-audit-report.json || true
          
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: '*-report.json'
          retention-days: 30

  build:
    runs-on: ${{ matrix.os }}
    needs: [auto-version, security-scan]
    if: always() && (needs.security-scan.result == 'success' || github.event_name != 'pull_request')
    
    env:
      PYTHONIOENCODING: utf-8
      PYTHONUTF8: 1
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            artifact_name: AutoSwiper.exe
            asset_name: AutoSwiper-Windows.exe
            platform: windows
          - os: macos-latest
            artifact_name: AutoSwiper
            asset_name: AutoSwiper-macOS
            platform: macos
          - os: ubuntu-latest
            artifact_name: AutoSwiper
            asset_name: AutoSwiper-Linux
            platform: linux

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2 # v2.6.1
        with:
          egress-policy: audit
          
      - name: Checkout code
        uses: actions/checkout@v4 # v4.1.7
        with:
          persist-credentials: false
          fetch-depth: 0  # For proper version detection
          
      - name: Set up Python
        uses: actions/setup-python@v5 # Updated to v5 for better cache handling
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          # No pip cache needed - uv handles dependencies blazingly fast!
          
      - name: Verify Python version and environment
        run: |
          python --version
          python -c "import sys; print(f'Python executable: {sys.executable}')"
          echo "Platform: ${{ matrix.platform }}"
          
      - name: Install uv
        uses: astral-sh/setup-uv@v5
          
      - name: Install dependencies with uv (blazingly fast!)
        run: |
          uv pip install --system -r requirements.txt
          uv pip install --system pyinstaller
          
      - name: Verify dependencies
        run: |
          uv pip list --system
          uv pip check --system
          
      - name: Set build environment variables
        run: |
          echo "BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
          echo "BUILD_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "COMMIT_SHA=${GITHUB_SHA::8}" >> $GITHUB_ENV
        shell: bash
        
      - name: Build executable
        run: python scripts/build_03_cross_platform.py
        env:
          PYTHONHASHSEED: 1  # For reproducible builds
          
      - name: Verify build output
        run: |
          if [ -f "dist/${{ matrix.artifact_name }}" ]; then
            echo "✅ Build successful: dist/${{ matrix.artifact_name }}"
            ls -la dist/
            file dist/${{ matrix.artifact_name }} || true
          else
            echo "❌ Build failed: dist/${{ matrix.artifact_name }} not found"
            exit 1
          fi
        shell: bash
        
      - name: Generate build metadata
        run: |
          cat > dist/build-info.json << EOF
          {
            "version": "${{ env.BUILD_VERSION }}",
            "commit": "${{ env.COMMIT_SHA }}",
            "build_date": "${{ env.BUILD_DATE }}",
            "platform": "${{ matrix.platform }}",
            "python_version": "${{ env.PYTHON_VERSION }}",
            "runner_os": "${{ runner.os }}"
          }
          EOF
        shell: bash
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}-${{ env.COMMIT_SHA }}
          path: |
            dist/${{ matrix.artifact_name }}
            dist/build-info.json
          retention-days: 90
          compression-level: 6
          
      - name: Upload artifacts for release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.asset_name }}
          path: dist/${{ matrix.artifact_name }}
          retention-days: 30

  # Automatic release with auto-incremented version (only for main pushes)
  auto-release:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [auto-version, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2 # v2.6.1
        with:
          egress-policy: audit
          
      - name: Checkout code
        uses: actions/checkout@v4 # v4.1.7
        with:
          persist-credentials: false
          fetch-depth: 0
          
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*Windows*"
          path: latest-release/
          
      - name: Download all build artifacts 
        uses: actions/download-artifact@v4
        with:
          pattern: "*macOS*"
          path: latest-release/
          
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*Linux*" 
          path: latest-release/
          
      - name: Prepare latest release assets
        run: |
          find latest-release/ -name "AutoSwiper*" -exec cp {} ./ \;
          ls -la AutoSwiper*
          
      - name: Create Git Tag
        run: |
          # Create and push the auto-incremented tag
          git tag ${{ needs.auto-version.outputs.version_tag }}
          git push origin ${{ needs.auto-version.outputs.version_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create Official Release
        uses: softprops/action-gh-release@v1 # v1.0.0
        with:
          tag_name: ${{ needs.auto-version.outputs.version_tag }}
          name: "🚀 Auto-Swiper ${{ needs.auto-version.outputs.version_tag }} - Ready to Download!"
          body: |
            # 🎉 Auto-Swiper ${{ needs.auto-version.outputs.version_tag }} is here!
            
            ## 📥 **Quick Download** (No Python needed!)
            
            | Platform | File | Size | Status |
            |----------|------|------|--------|
            | 🪟 **Windows** | `AutoSwiper.exe` | ~143 KB | ✅ Stable |
            | 🍎 **macOS** | `AutoSwiper-macOS` | ~56 MB | ✅ Stable |
            | 🐧 **Linux** | `AutoSwiper-Linux` | ~109 MB | ✅ Stable |
            
            ## 🚀 **Quick Start** (30 seconds!)
            
            ### Windows: `AutoSwiper.exe` → Double-click and go! 🎉
            ### macOS: `AutoSwiper-macOS` → Right-click "Open" → Allow security override 💫  
            ### Linux: `chmod +x AutoSwiper-Linux && ./AutoSwiper-Linux` 🐧
            
            ## ⚡ **What's New:**
            ```
            ${{ github.event.head_commit.message }}
            ```
            
            ## 🔧 **Features:**
            - ✅ No Python installation required
            - ✅ Works with Bluestacks and Android emulators  
            - ✅ Smart auto-swiping for Hinge
            - ✅ Rich terminal interface
            - ✅ Cross-platform compatibility
            
            ---
            
            **📊 Release Info:**
            - **📅 Released:** ${{ github.event.head_commit.timestamp }}  
            - **🔗 Commit:** [${{ github.sha }}](${{ github.event.head_commit.url }})  
            - **👤 Author:** ${{ github.event.head_commit.author.name }}
            - **🏷️ Version:** Auto-incremented stable release
          files: |
            AutoSwiper.exe
            AutoSwiper-macOS
            AutoSwiper-Linux
          draft: false
          prerelease: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
